 */
void init_new_dir_inode(int parent_path_inode_num, int new_dir_inode_num, char *directory_name) {
	struct ext2_inode* new_directory_inode = get_inode(new_dir_inode_num);
	unsigned char *block;
	unsigned int block_index;
	struct ext2_dir_entry_2 *new_entry;
	char dots[2] = "..";

	// Set initial values, all other fields are 0
	new_directory_inode->i_links_count = 1;
	new_directory_inode->i_mode = EXT2_S_IFDIR;
	new_directory_inode->i_size = EXT2_BLOCK_SIZE;
	new_directory_inode->i_blocks = EXT2_BLOCK_SIZE / DISK_SECTOR_SIZE;
	block_index = get_free_block_index(1);
	new_directory_inode->i_block[0] = block_index;

	block = get_block(block_index);

	// create "." and ".." entries
	new_entry = (struct ext2_dir_entry_2 *)  block;

	new_entry->inode = new_dir_inode_num;
	new_entry->rec_len = 12;
	new_entry->name_len = 1;
	new_entry->file_type = EXT2_FT_DIR;
	strncpy(new_entry->name, dots, 1);
	
	new_entry = (struct ext2_dir_entry_2 *) block + 12;

	new_entry->inode = parent_path_inode_num;
	new_entry->rec_len = EXT2_BLOCK_SIZE;
	new_entry->name_len = 2;
	new_entry->file_type = EXT2_FT_DIR;
	strncpy(new_entry->name, dots, 2);

	// Creates directory entry to the newly created directory
	create_entry(parent_path_inode_num, directory_name, new_dir_inode_num, EXT2_FT_DIR);
}


unsigned int create_entry(unsigned int inode_index, const char *name, unsigned int child_inode, unsigned char file_type) {
	struct ext2_inode *inode = get_inode(inode_index);
	unsigned int name_length = strlen(name);
	unsigned int target_block;
	unsigned int actual_block;
	unsigned int i = 1;

	// find the last non-empty block index
	while (i < SINGLE_INDIRECT_INDEX && inode->i_block[i] != 0) {
		i++;
	}

	target_block = inode->i_block[i - 1];
	actual_block = add_entry(target_block, name, child_inode, file_type, name_length, 
							quad_byte_ceil(name_length + DIR_ENTRY_MIN_SIZE));
	if (target_block == actual_block) {
		return actual_block;
	} else {
		if (i == SINGLE_INDIRECT_INDEX) {
			//handle indirection here
			return 0;
		} else {
			// must bookkeep new block
			inode->i_block[i] = actual_block;
			inode->i_size += EXT2_BLOCK_SIZE;
			inode->i_blocks += EXT2_BLOCK_SIZE / DISK_SECTOR_SIZE;
			return actual_block;
		}
	}

}

/* 
	Given a block index to a directory block and a directory name, add a new entry to the block
   or allocate and add a new entry to a new block. Return the index of the block written to, or 0
   if no more blocks exist. 
*/
unsigned int add_entry(unsigned int block_index, const char *name, unsigned int child_inode, unsigned char file_type, unsigned int name_length, unsigned int entry_size) {
	struct ext2_dir_entry_2 *current_dir = (struct ext2_dir_entry_2 *) (disk + (block_index * EXT2_BLOCK_SIZE));
	struct ext2_dir_entry_2 *new_dir;
	unsigned short current_size;
	

	struct ext2_dir_entry_2 *end_of_directory = (struct ext2_dir_entry_2 *) ((long) current_dir) + EXT2_BLOCK_SIZE;
	unsigned int next_block;

	current_size = quad_byte_ceil(current_dir->name_len) + DIR_ENTRY_MIN_SIZE;

	while (current_dir < end_of_directory && ((unsigned int) (current_dir->rec_len - current_size)) < entry_size) {
		current_dir = (struct ext2_dir_entry_2 *) ((long) current_dir + (long) current_dir->rec_len);
		current_size = quad_byte_ceil(current_dir->name_len) + DIR_ENTRY_MIN_SIZE;
	}

	// if directory entry can fit inside the block or before the next entry, place it here
	if (((unsigned int) (current_dir->rec_len - current_size)) >= entry_size) {
		new_dir = (struct ext2_dir_entry_2 *) ((long) current_dir + (long) current_size);
		new_dir->rec_len = current_dir->rec_len - current_size;
		new_dir->name_len = name_length;
		new_dir->file_type = file_type;
		strncpy(new_dir->name, name, name_length); 
		new_dir->inode = child_inode;

		current_dir->rec_len = current_size;

		//return the block index of the block the directory was added to
		return block_index;
	// no space was found in this block, must reserve a new one and add it there
	} else {
		// reserve a new block
		next_block = get_free_block_index(1);
		if (next_block == 0) {
			return 0;
		}
		new_dir = (struct ext2_dir_entry_2 *) (disk + (next_block * EXT2_BLOCK_SIZE));
		new_dir->rec_len = EXT2_BLOCK_SIZE;
		new_dir->name_len = name_length;
		new_dir->file_type = file_type;
		strncpy(new_dir->name, name, name_length); 
		new_dir->inode = child_inode;
		
		return next_block;
	}

}

/* 
	Round an int up to the next multiple of 4.
*/
unsigned short quad_byte_ceil(unsigned char bytes) {
	return (unsigned short) ((bytes + 3) & ~0x3);
}
